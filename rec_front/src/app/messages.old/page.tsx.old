'use client';

import React, { useState, useEffect } from 'react';
import { Conversation, Message, ParticipantRole } from '@/types';
import { format } from 'date-fns';
import { useDataStore } from '@/store/useDataStore';
import { useAuth } from '@/app/context/AuthContext';

// UI Components - These would ideally be moved to separate files
const ConversationItem = ({ 
  conversation, 
  isActive, 
  onClick, 
  unreadCount = 0
}: { 
  conversation: Conversation, 
  isActive: boolean, 
  onClick: () => void, 
  unreadCount?: number 
}) => {
  // Find other participants (excluding current user)
  const participants = conversation.participants.filter(p => p.role !== ParticipantRole.ADMIN);
  const lastMessageDate = new Date(conversation.last_message_at);
  
  return (
    <div 
      className={`flex items-center p-3 cursor-pointer hover:bg-gray-100 border-b ${isActive ? 'bg-blue-50' : ''}`}
      onClick={onClick}
    >
      {/* Avatar placeholder - Replace with actual avatar component */}
      <div className="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center mr-3">
        {conversation.is_group ? 
          <span>ðŸ‘¥</span> : 
          <span>{participants[0]?.user_id.toString().charAt(0).toUpperCase()}</span>
        }
      </div>
      
      <div className="flex-1 min-w-0">
        <div className="flex justify-between items-center">
          <h3 className="text-sm font-medium truncate">{conversation.title}</h3>
          <span className="text-xs text-gray-500">{format(lastMessageDate, 'MMM d')}</span>
        </div>
        
        <div className="flex justify-between items-center">
          <p className="text-xs text-gray-500 truncate">
            {conversation.entity_type && `${conversation.entity_type}: #${conversation.entity_id}`}
          </p>
          {unreadCount > 0 && (
            <span className="bg-blue-500 text-white text-xs rounded-full px-2 py-0.5">
              {unreadCount}
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

const MessageItem = ({ message, isCurrentUser }: { message: Message, isCurrentUser: boolean }) => {
  const messageDate = new Date(message.created_at);
  
  return (
    <div className={`my-2 flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`}>
      <div className={`rounded-lg px-4 py-2 max-w-[70%] ${isCurrentUser ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>
        <div className="text-sm">{message.content}</div>
        <div className="text-xs text-right mt-1 opacity-70">
          {format(messageDate, 'h:mm a')}
        </div>
        
        {message.attachments.length > 0 && (
          <div className="mt-2 pt-2 border-t border-gray-300">
            {message.attachments.map(attachment => (
              <div key={attachment.id} className="flex items-center text-xs">
                <span>ðŸ“Ž</span>
                <span className="ml-1">{attachment.file_name}</span>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

const MessageComposer = ({ onSend }: { onSend: (message: string) => void }) => {
  const [message, setMessage] = useState('');
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (message.trim()) {
      onSend(message);
      setMessage('');
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="border-t p-3 flex items-end">
      <textarea
        className="flex-1 border rounded-lg p-2 resize-none"
        placeholder="Type a message..."
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        rows={3}
      />
      <button
        type="submit"
        className="ml-2 px-4 py-2 bg-blue-500 text-white rounded-lg"
        disabled={!message.trim()}
      >
        Send
      </button>
    </form>
  );
};

const ContactInfoPanel = ({ conversation }: { conversation: Conversation }) => {
  return (
    <div className="border-l w-full max-w-xs p-4 hidden lg:block">
      <h2 className="font-semibold text-lg mb-4">Conversation Info</h2>
      
      <div className="mb-4">
        <h3 className="font-medium text-sm text-gray-500 mb-1">Title</h3>
        <p>{conversation.title}</p>
      </div>
      
      {conversation.entity_type && (
        <div className="mb-4">
          <h3 className="font-medium text-sm text-gray-500 mb-1">Related to</h3>
          <p>{conversation.entity_type}: #{conversation.entity_id}</p>
        </div>
      )}
      
      <div className="mb-4">
        <h3 className="font-medium text-sm text-gray-500 mb-1">Participants</h3>
        <ul>
          {conversation.participants.map(participant => (
            <li key={participant.id} className="flex items-center py-1">
              <div className="w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center mr-2">
                <span>{participant.user_id.toString().charAt(0).toUpperCase()}</span>
              </div>
              <span>User #{participant.user_id}</span>
              {participant.role === ParticipantRole.ADMIN && (
                <span className="ml-2 text-xs bg-gray-200 px-2 py-0.5 rounded">Admin</span>
              )}
            </li>
          ))}
        </ul>
      </div>
      
      <div>
        <h3 className="font-medium text-sm text-gray-500 mb-1">Created</h3>
        <p>{format(new Date(conversation.created_at), 'PPP')}</p>
      </div>
    </div>
  );
};

export default function MessagesPage() {
  const {
    conversations,
    currentConversation,
    messages,
    isLoadingConversations,
    isLoadingMessages,
    fetchConversations,
    fetchConversation,
    sendMessage,
    selectConversation
  } = useMessaging();
  
  const { user } = useAuth();
  const [isMobileListVisible, setIsMobileListVisible] = useState(true);
  
  useEffect(() => {
    if (user) {
      fetchConversations();
    }
  }, [user, fetchConversations]);

  const handleSelectConversation = async (conversation: Conversation) => {
    await selectConversation(conversation);
    setIsMobileListVisible(false);
  };

  const handleSendMessage = async (content: string) => {
    if (!currentConversation || !user) return;
    await sendMessage(content, currentConversation.id);
  };

  const toggleMobileView = () => {
    setIsMobileListVisible(!isMobileListVisible);
  };

  // Calculate unread counts for each conversation
  const getUnreadCount = (conversation: Conversation) => {
    if (!user) return 0;
    
    const userId = parseInt(user.id);
    const userParticipant = conversation.participants.find(p => p.user_id === userId);
    
    if (!userParticipant || !userParticipant.last_read_at) return 0;
    
    const lastReadDate = new Date(userParticipant.last_read_at);
    const lastMessageDate = new Date(conversation.last_message_at);
    
    // If the last message is newer than the last read time, count as unread
    return lastMessageDate > lastReadDate ? 1 : 0;
  };

  if (isLoadingConversations && conversations.length === 0) {
    return <div className="flex items-center justify-center h-screen">Loading...</div>;
  }

  return (
    <div className="flex h-screen bg-white overflow-hidden">
      {/* Mobile toggle button */}
      <button 
        className="fixed bottom-4 right-4 z-50 lg:hidden bg-blue-500 text-white p-3 rounded-full shadow-lg"
        onClick={toggleMobileView}
      >
        {isMobileListVisible ? 'ðŸ’¬' : 'ðŸ“‹'}
      </button>
      
      {/* Conversations List (Left Panel) */}
      <div 
        className={`w-full max-w-xs border-r flex flex-col ${
          isMobileListVisible ? 'block' : 'hidden'
        } lg:block`}
      >
        <div className="p-4 border-b">
          <h1 className="text-lg font-semibold">Messages</h1>
          <div className="mt-2">
            <input
              type="text"
              placeholder="Search conversations..."
              className="w-full border rounded-lg px-3 py-2 text-sm"
            />
          </div>
        </div>
        
        <div className="flex-1 overflow-y-auto">
          {conversations.length === 0 ? (
            <div className="p-4 text-center text-gray-500">No conversations yet</div>
          ) : (
            conversations.map((conversation) => (
              <ConversationItem
                key={conversation.id}
                conversation={conversation}
                isActive={currentConversation?.id === conversation.id}
                onClick={() => handleSelectConversation(conversation)}
                unreadCount={getUnreadCount(conversation)}
              />
            ))
          )}
        </div>
        
        <div className="p-3 border-t">
          <button className="w-full bg-blue-500 text-white rounded-lg py-2">
            New Conversation
          </button>
        </div>
      </div>
      
      {/* Messages (Center Panel) */}
      <div 
        className={`flex-1 flex flex-col ${
          !isMobileListVisible ? 'block' : 'hidden'
        } lg:block`}
      >
        {currentConversation ? (
          <>
            <div className="flex items-center p-3 border-b">
              <button className="mr-2 lg:hidden" onClick={toggleMobileView}>
                &larr;
              </button>
              <h2 className="font-semibold">{currentConversation.title}</h2>
            </div>
            
            <div className="flex-1 overflow-y-auto p-4">
              {isLoadingMessages ? (
                <div className="flex items-center justify-center h-full">Loading messages...</div>
              ) : messages.length === 0 ? (
                <div className="flex items-center justify-center h-full text-gray-500">
                  No messages yet. Start the conversation!
                </div>
              ) : (
                messages.map((message) => (
                  <MessageItem
                    key={message.id}
                    message={message}
                    isCurrentUser={user ? parseInt(user.id) === message.sender_id : false}
                  />
                ))
              )}
            </div>
            
            <MessageComposer onSend={handleSendMessage} />
          </>
        ) : (
          <div className="flex items-center justify-center h-full text-gray-500">
            Select a conversation to view messages
          </div>
        )}
      </div>
      
      {/* Contact Info (Right Panel) */}
      {currentConversation && <ContactInfoPanel conversation={currentConversation} />}
    </div>
  );
}

function useMessaging(): { conversations: any; currentConversation: any; messages: any; isLoadingConversations: any; isLoadingMessages: any; fetchConversations: any; fetchConversation: any; sendMessage: any; selectConversation: any; } {
  throw new Error('Function not implemented.');
}
